buildscript {
    ext.kotlinVersion = '1.3.61'

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

// import the `readReactNativeVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/742448b9588b3a0aa580a5e80ae95bdf/raw/8eb62d40ee7a5104d2fcaeff21ce6f29bd93b054/readReactNativeVersion.gradle'

// import the `readHashedVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/ceaf20a8e7d9b8404e4a5ff2e6c36650/raw/e1460a128e4b9863963410d719c7d44c3adefd02/readHashedVersion.gradle'

group='org.wordpress-mobile.gutenberg-mobile'

def buildAssetsFolder = 'build/assets'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        buildConfigField "boolean", "SHOULD_ATTACH_JS_BUNDLE", willPublishReactNativeBridgeBinary.toString()
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            assets.srcDirs += buildAssetsFolder
            assets.srcDirs += '../../../../../src/block-support'
            // Despite being in a folder called "resources", the files in
            // unsupported-block-editor are accessed as assets by their
            // consumers: the WordPressEditor library.
            assets.srcDirs += '../../../../../resources/unsupported-block-editor'
        }
    }
}

repositories {
    google()
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url "https://a8c-libs.s3.amazonaws.com/android" }
    maven { url "https://a8c-libs.s3.amazonaws.com/android/hermes-mirror" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    // For animated GIF support
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation "org.wordpress:utils:1.22"

    if (willPublishReactNativeBridgeBinary) {
        def rnVersion = readReactNativeVersion('../../../../package.json', 'devDependencies')
        println "react-native version for react-native-bridge: $rnVersion"
        implementation "com.facebook.react:react-native:$rnVersion"
        implementation "org.wordpress-mobile.gutenberg-mobile:react-native-aztec:$reactNativeAztecVersion"
        implementation "com.github.wordpress-mobile:react-native-svg:${readHashedVersion('../../../react-native-editor/package.json', 'react-native-svg', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-video:${readHashedVersion('../../../react-native-editor/package.json', 'react-native-video', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-linear-gradient:${readHashedVersion('../../../react-native-editor/package.json', 'react-native-linear-gradient', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-slider:${readHashedVersion('../../../react-native-editor/package.json', '@react-native-community/slider', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-get-random-values:${readHashedVersion('../../../react-native-editor/package.json', 'react-native-get-random-values', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-masked-view:${readHashedVersion('../../../react-native-editor/package.json', '@react-native-community/masked-view', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-gesture-handler:${readHashedVersion('../../../react-native-editor/package.json', 'react-native-gesture-handler', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-screens:${readHashedVersion('../../../react-native-editor/package.json', 'react-native-screens', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-safe-area-context:${readHashedVersion('../../../react-native-editor/package.json', 'react-native-safe-area-context', 'dependencies')}"
        implementation "com.github.wordpress-mobile:react-native-reanimated:${readHashedVersion('../../../react-native-editor/package.json', 'react-native-reanimated', 'dependencies')}"
        runtimeOnly "org.wordpress-mobile:hermes-release-mirror:0.61.5"
   } else {
        api 'com.facebook.react:react-native:+'
        api project(':@wordpress_react-native-aztec')
        api project(':react-native-linear-gradient')
        api project(':react-native-svg')
        api project(':react-native-video')
        api project(':@react-native-community_slider')
        api project(':react-native-get-random-values')
        api project(':@react-native-community_masked-view')
        api project(':react-native-gesture-handler')
        api project(':react-native-screens')
        api project(':react-native-safe-area-context')
        api project(':react-native-reanimated')
        debugRuntimeOnly "org.wordpress-mobile:hermes-debug-mirror:0.61.5"
        releaseRuntimeOnly "org.wordpress-mobile:hermes-release-mirror:0.61.5"
   }
}

preBuild.doFirst {
    if (willPublishReactNativeBridgeBinary) {
        // Verify that the bundle is correctly copied before building to publish. This will be automatically done
        // from the shell script that's used to publish the binaries, but this will serve as an extra check if anyone
        // tries to manually publish the binary.
        def assertionMessage = "Bundle file is missing. Please ensure that you run `npm install && npm run bundle:android` from the root Gutenberg project and copy the bundle file to the react-native-bridge/builds/assets folder"
        assert file("./build/assets/index.android.bundle").exists() : assertionMessage
    }
}

if (willPublishReactNativeBridgeBinary) {
    project.afterEvaluate {
        publishing {
            publications {
                ReactNativeBridgePublication(MavenPublication) {
                    artifact bundleReleaseAar

                    groupId 'org.wordpress-mobile.gutenberg-mobile'
                    artifactId 'react-native-gutenberg-bridge'
                    version publishReactNativeBridgeVersion

                    addDependenciesToPom(pom)
                }
            }
            repositories {
                maven {
                    url "s3://a8c-libs.s3.amazonaws.com/android"
                    credentials(AwsCredentials) {
                        accessKey project.hasProperty('awsAccessKey') ? project.properties['awsAccessKey'] : System.getenv('AWS_ACCESS_KEY')
                        secretKey project.hasProperty('awsSecretKey') ? project.properties['awsSecretKey'] : System.getenv('AWS_SECRET_KEY')
                    }
                }
            }
        }
    }
}

// Publication doesn't know about dependencies, so we need to manually add them
def addDependenciesToPom(pom) {
    pom.withXml {
        def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

        def addDependencies = { configuration, addExtraNode = {} ->
            configuration.allDependencies
                .findAll { it instanceof ExternalDependency && it.name != 'unspecified' }
                .each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    addExtraNode(dependencyNode)
                }
        }

        addDependencies(configurations.implementation)
        addDependencies(configurations.runtimeOnly) { dependencyNode ->
            dependencyNode.appendNode('scope', 'runtime')
        }
    }
}

tasks.register('checkIfVersionIsAlreadyPublished') {
    def pomUrl = "https://a8c-libs.s3.amazonaws.com/android/org/wordpress-mobile/gutenberg-mobile/react-native-bridge/${publishReactNativeBridgeVersion}/react-native-bridge-${publishReactNativeBridgeVersion}.pom"
    def responseCode = new URL(pomUrl).openConnection().with { connection ->
        requestMethod = 'HEAD'
        connect()
        responseCode
    }

    if (responseCode == 200) {
        throw new GradleException("'$publishReactNativeBridgeVersion' is already published, please use a different version name. If this happened in CI for a PR, a new commit is necessary. If this happened for a tag, the existing version needs to be manually removed from S3.")
    } else if (responseCode == 403) {
        // S3 returns 403 status code if a file doesn't exist, which is what we want. Proceed to publish..
    } else {
        throw new GradleException("An unexpected status code ($responseCode) was received while checking if the version ($publishReactNativeBridgeVersion) is already published to S3. If this issue persists, please contact Platform 9 team for help.")
    }
}

publish.dependsOn(tasks.named('checkIfVersionIsAlreadyPublished'))
publish.doLast { println "Successfully published 'react-native-bridge' version '$publishReactNativeBridgeVersion'" }
