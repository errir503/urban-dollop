/**
 * Editor only CSS.
 */

// Undo default editor styles.
// These need extra specificity.
.editor-styles-wrapper .wp-block-navigation {
	ul {
		margin-top: 0;
		margin-bottom: 0;
		margin-left: 0;
		padding-left: 0;
	}
}

// This element is inline on the frontend but needs to be editable, therefore inline-block, in the editor.
.wp-block-navigation-link__label {
	display: inline-block;
}


/**
 * Submenus.
 */

// Ensure sub-menus stay open and visible when a nested block is selected.
.wp-block-navigation__container.is-parent-of-selected-block {
	visibility: visible;
	opacity: 1;
}

// Low specificity default to ensure background color applies to submenus.
.wp-block-navigation__container,
.wp-block-navigation-link {
	background-color: inherit;
}

// Only show the flyout on hover if the parent menu item is selected.
.wp-block-navigation:not(.is-selected):not(.has-child-selected) .has-child:hover {
	> .wp-block-navigation-link__container {
		opacity: 0;
		visibility: hidden;
	}
}

// Styles for submenu flyout.
.has-child {
	&.is-selected,
	&.has-child-selected {
		> .wp-block-navigation-link__container {
			display: flex;
			opacity: 1;
			visibility: visible;
		}
	}
}

// Show a submenu when generally dragging (is-dragging-components-draggable) if that
// submenu has children (has-child) and is being dragged within (is-dragging-within).
.is-dragging-components-draggable .has-child.is-dragging-within {
	> .wp-block-navigation-link__container {
		opacity: 1;
		visibility: visible;
	}
}

// IE fix for submenu visibility on parent focus.
.is-editing > .wp-block-navigation__container {
	visibility: visible;
	opacity: 1;
	display: flex;
	flex-direction: column;
}

.is-dragging-components-draggable .wp-block-navigation-link > .wp-block-navigation__container {
	// Set opacity to 1 to still be able to show the draggable chip.
	opacity: 1;
	visibility: hidden;

	// Show the chip but hide the submenu list.
	.block-editor-block-draggable-chip-wrapper {
		visibility: visible;
	}
}

/**
 * Colors Selector component
 */

$colors-selector-size: 22px;
.block-library-colors-selector {
	width: auto;

	// Toolbar colors-selector button.
	.block-library-colors-selector__toggle {
		display: block;
		margin: 0 auto;
		padding: 3px;
		width: auto;
	}

	// Button container.
	.block-library-colors-selector__icon-container {
		height: 30px;
		position: relative;
		margin: 0 auto;
		padding: 3px;
		display: flex;
		align-items: center;
		border-radius: 4px;
	}

	.block-library-colors-selector__state-selection {
		margin-left: auto;
		margin-right: auto;

		// colors-selector - selection status.
		border-radius: $colors-selector-size / 2;
		box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.2);

		width: $colors-selector-size;
		min-width: $colors-selector-size;
		height: $colors-selector-size;
		min-height: $colors-selector-size;
		line-height: ( $colors-selector-size - 2 );
		padding: 2px;

		> svg {
			// Override `min-width: $button-size-small` on toolbar-group/style.scss
			min-width: auto !important;
		}

		// Styling icon color.
		&.has-text-color {
			> svg,
			> svg path {
				color: inherit;
			}
		}
	}
}

// Colors Selector Popover.
$color-control-label-height: 20px;
.block-library-colors-selector__popover {
	.color-palette-controller-container {
		padding: 16px;
	}

	.components-base-control__label {
		height: $color-control-label-height;
		line-height: $color-control-label-height;
	}

	.component-color-indicator {
		float: right;
		margin-top: 2px;
	}

	.components-panel__body-title {
		display: none;
	}
}

.wp-block-navigation .block-editor-button-block-appender {
	justify-content: flex-start;
}


/**
 * Setup state
 */

// Unstyle some inherited placeholder component styles.
.components-placeholder.wp-block-navigation-placeholder {
	outline: none;
	padding: 0;
	box-shadow: none;
	background: none;
	min-height: 0;

	// Needed for the preview menu items to match actual menu items.
	.components-placeholder__fieldset {
		font-size: inherit;
	}

	.components-placeholder__fieldset .components-button {
		margin-bottom: 0;
	}

	// For the placeholder indicators to colorize correctly, colors need to be inherited unless selected.
	color: inherit;

	.is-selected & {
		color: $gray-900;
	}
}

// Spinner.
.wp-block-navigation-placeholder .components-spinner {
	margin-top: -4px;
	margin-left: 4px;
	vertical-align: middle;
	margin-right: 7px;
}

// Unselected state.
.wp-block-navigation-placeholder__preview {
	display: flex;
	flex-direction: row;
	align-items: center;
	flex-wrap: nowrap;
	width: 100%;
	overflow: hidden;

	// Style skeleton elements to mostly match the metrics of actual menu items.
	// Needs specificity.
	.wp-block-navigation-link.wp-block-navigation-link {
		position: relative;
		min-width: 72px;

		&::before {
			display: block;
			content: "";
			border-radius: $radius-block-ui;
			background: currentColor;
			height: $grid-unit-20;
			width: 100%;
		}
	}

	svg {
		fill: currentColor;
	}

	.wp-block-navigation-link.wp-block-navigation-link,
	svg {
		opacity: 0.3;
	}

	// Don't show the preview boxes for an empty nav block,
	// but be technically present to help size the empty state.
	.wp-block-navigation.is-selected & {
		display: flex;
		opacity: 0;
		width: 0;
		overflow: hidden;
		flex-wrap: nowrap;
	}

	// .. but hide entirely when the placeholder can still be toggled.
	.wp-block-navigation.is-selected .is-small & {
		display: none;
	}

	.wp-block-navigation.is-selected .is-medium & {
		display: none;
	}
}

// Selected state.
.wp-block-navigation-placeholder__controls {
	padding: $grid-unit-10;
	border-radius: $radius-block-ui;
	background-color: $white;
	box-shadow: inset 0 0 0 $border-width $gray-900;
	flex-direction: row;
	align-items: center;
	display: none;
	position: relative;
	z-index: 1;

	// Adjust padding for when shown horizontally.
	.is-large & {
		padding: $grid-unit-05 $grid-unit-10;
	}

	// If an ancestor has a text-decoration property applied, it is inherited regardless of
	// the specificity of a child element. Only pulling the child out of the flow fixes it.
	// See also https://www.w3.org/TR/CSS21/text.html#propdef-text-decoration.
	float: left;
	width: 100%;

	// Show when selected.
	.wp-block-navigation.is-selected & {
		display: flex;
	}

	// Show stacked for the vertical navigation, or small placeholders.
	.is-small &,
	.is-medium &,
	.is-vertical & {
		.wp-block-navigation-placeholder__actions {
			flex-direction: column;
		}
	}

	// Both selected and vertical.
	.is-selected.is-vertical & {
		display: inline-flex; // This makes the white box not take up all available space.
		padding: $grid-unit-15;
	}

	.wp-block-navigation-placeholder__icon {
		margin-right: $grid-unit-15;
		height: $button-size; // Prevents jumpiness.
	}

	// Block title
	.wp-block-navigation-placeholder__actions__indicator {
		margin-right: $grid-unit-15;
		padding: 0;
		align-items: center;
		justify-content: flex-start;
		line-height: 0;

		// Line up with the icon in the toolbar.
		margin-left: $grid-unit-05 + $border-width;

		svg {
			margin-right: $grid-unit-05;
		}

		.is-vertical & {
			margin-bottom: $grid-unit-05;
			margin-left: 0;
		}

		// Show only in big placeholders.
		display: none;
		.is-large & {
			display: inline-flex;
		}
	}
}

// When block is vertical.
.is-vertical .wp-block-navigation-placeholder,
.is-vertical .wp-block-navigation-placeholder__preview,
.is-vertical .wp-block-navigation-placeholder__controls {
	min-height: $icon-size + ($grid-unit-20 + $grid-unit-05 + $grid-unit-15 + $grid-unit-15) * 3;
}

.is-vertical .wp-block-navigation-placeholder__preview,
.is-vertical .wp-block-navigation-placeholder__controls {
	flex-direction: column;
	align-items: flex-start;
}

.wp-block-navigation-placeholder__actions {
	display: flex;
	font-size: $default-font-size;
	font-family: $default-font;

	.components-button.components-dropdown-menu__toggle.has-icon {
		padding: ($grid-unit-15 / 2) $grid-unit-05 ($grid-unit-15 / 2) $grid-unit-15;
		display: flex;
		flex-direction: row-reverse; // This puts the chevron, which is hidden from screen readers, on the right.
	}

	// Margins.
	.components-dropdown,
	> .components-button {
		margin-right: $grid-unit-15;
	}
}


/**
 * Mobile menu.
 */

// These needs extra specificity in the editor.
.wp-block-navigation__responsive-container:not(.is-menu-open) {
	.components-button.wp-block-navigation__responsive-container-close {
		@include break-small {
			display: none;
		}
	}
}
.components-button.wp-block-navigation__responsive-container-open {
	@include break-small {
		display: none;
	}
}

// Emulate the fullscreen editing inside the editor.
// Most of this can be removed when the iframe lands.

// When not fullscreen.
.wp-block-navigation__responsive-container.is-menu-open {
	position: fixed;
	top: $admin-bar-height-big + $header-height + $block-toolbar-height + $border-width;

	@include break-medium() {
		top: $admin-bar-height + $header-height + $border-width;
	}

	// Navigation sidebar rules.
	@include break-medium() {
		left: $admin-sidebar-width-collapsed;
	}
	@include break-large() {
		left: $admin-sidebar-width;
	}
}

.has-fixed-toolbar .wp-block-navigation__responsive-container.is-menu-open {
	@include break-medium() {
		top: $admin-bar-height + $header-height + $block-toolbar-height + $border-width;
	}
}

.is-mobile-preview .wp-block-navigation__responsive-container.is-menu-open,
.is-tablet-preview .wp-block-navigation__responsive-container.is-menu-open {
	top: $admin-bar-height + $header-height + $block-toolbar-height + $border-width;
}

.is-sidebar-opened .wp-block-navigation__responsive-container.is-menu-open {
	right: $sidebar-width;
}

// When fullscreen.
.is-fullscreen-mode {
	.wp-block-navigation__responsive-container.is-menu-open {
		left: 0; // Unset the value from non fullscreen mode.
		top: $admin-bar-height-big + $header-height + $block-toolbar-height + $border-width;

		@include break-medium() {
			top: $header-height + $border-width;
		}
	}

	.has-fixed-toolbar .wp-block-navigation__responsive-container.is-menu-open {
		@include break-medium() {
			top: $header-height + $block-toolbar-height + $border-width;
		}
	}

	.is-mobile-preview .wp-block-navigation__responsive-container.is-menu-open,
	.is-tablet-preview .wp-block-navigation__responsive-container.is-menu-open {
		top: $header-height + $block-toolbar-height + $border-width;
	}
}

// The iframe makes these rules a lot simpler.
body.editor-styles-wrapper .wp-block-navigation__responsive-container.is-menu-open {
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

// Without this, the block cannot be selected, nor does the right container get focus.
// @todo: this is disruptive. Ideally we can retire a few of the containers,
// so focus is applied naturally on the block container.
// It's important the right container has focus, otherwise you can't press
// "Delete" to remove the block.
.wp-block-navigation__responsive-close {
	@include break-small() {
		pointer-events: none;

		.wp-block-navigation__responsive-container-close,
		.block-editor-block-list__layout * {
			pointer-events: all;
		}
	}

	// Page List items should remain inert.
	.wp-block-pages-list__item__link {
		pointer-events: none;
	}
}

// The menu and close buttons need higher specificity in the editor.
.components-button.wp-block-navigation__responsive-container-open.wp-block-navigation__responsive-container-open,
.components-button.wp-block-navigation__responsive-container-close.wp-block-navigation__responsive-container-close {
	padding: 0;
	height: auto;
	color: inherit;
}

// Customize the mobile editing.
// This can be revisited in the future, but for now, inherit design from the parent.
.is-menu-open .wp-block-navigation__responsive-container-content * {
	.block-list-appender {
		margin-top: $grid-unit-20;
	}
}
