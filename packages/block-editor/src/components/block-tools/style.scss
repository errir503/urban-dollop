/**
 * Insertion Point.
 */

.block-editor-block-list__insertion-point {
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
}

.block-editor-block-list__insertion-point-indicator {
	position: absolute;
	background: var(--wp-admin-theme-color);
	border-radius: 2px;
	transform-origin: center;
	opacity: 0;
	will-change: transform, opacity;

	.block-editor-block-list__insertion-point.is-vertical > & {
		top: calc(50% - 2px);
		height: 4px;
		width: 100%;
	}

	.block-editor-block-list__insertion-point.is-horizontal > & {
		top: 0;
		bottom: 0;
		left: calc(50% - 2px);
		width: 4px;
	}
}

// This is the clickable plus.
.block-editor-block-list__insertion-point-inserter {
	// Don't show on mobile.
	display: none;
	position: absolute;
	will-change: transform;

	@include break-mobile() {
		display: flex;
	}

	justify-content: center;

	top: calc(50% - #{$button-size-small * 0.5});
	left: calc(50% - #{$button-size-small * 0.5});
}

.block-editor-block-list__block-side-inserter-popover .components-popover__content > div {
	pointer-events: none;

	> * {
		pointer-events: all;
	}
}

// Sibling inserter / "inbetweenserter".
.block-editor-block-list__empty-block-inserter,
.block-editor-block-list__insertion-point-inserter {
	.block-editor-inserter__toggle.components-button.has-icon {
		// Basic look
		background: $gray-900;
		border-radius: $radius-block-ui;
		color: $white;
		padding: 0;

		// Special dimensions for this button.
		min-width: $button-size-small;
		height: $button-size-small;

		&:hover {
			color: $white;
			background: var(--wp-admin-theme-color);
		}
	}
}

.block-editor-block-list__insertion-point-inserter .block-editor-inserter__toggle.components-button.has-icon {
	background: var(--wp-admin-theme-color);
	&:hover {
		background: $gray-900;
	}
}

/**
 * Block Toolbar when contextual.
 */

// Base left position for the toolbar when fixed.
@include editor-left(".block-editor-block-contextual-toolbar.is-fixed");

.block-editor-block-contextual-toolbar {
	// Block UI appearance.
	display: inline-flex;
	border: $border-width solid $gray-900;
	border-radius: $radius-block-ui;
	background-color: $white;

	.block-editor-block-toolbar .components-toolbar-group,
	.block-editor-block-toolbar .components-toolbar {
		border-right-color: $gray-900;
	}

	&.is-fixed {
		position: sticky;
		top: 0;
		z-index: z-index(".block-editor-block-popover");
		display: block;
		width: 100%;
		overflow: hidden;

		.block-editor-block-toolbar {
			overflow: auto;
			overflow-y: hidden;
		}

		border: none;
		border-bottom: $border-width solid $gray-200;
		border-radius: 0;

		.block-editor-block-toolbar .components-toolbar-group,
		.block-editor-block-toolbar .components-toolbar {
			border-right-color: $gray-200;
		}
	}

	// Add a scrim to the right of the collapsed button.
	&.is-collapsed::after {
		content: "";
		position: absolute;
		left: 100%;
		width: $grid-unit-60;
		height: 100%;
		background: linear-gradient(to right, $white, transparent);
	}

	// on desktop and tablet viewports the toolbar is fixed
	// on top of interface header
	$toolbar-margin: $grid-unit-80 * 3 - 2 * $grid-unit + $grid-unit-05;
	@include break-medium() {
		&.is-fixed {
			// leave room for block inserter, undo and redo, list view
			margin-left: $toolbar-margin;
			// position on top of interface header
			position: fixed;
			top: $admin-bar-height;
			// Don't fill up when empty
			min-height: initial;
			// remove the border
			border-bottom: none;
			// has to be flex for collapse button to fit
			display: flex;

			// Mimic the height of the parent, vertically align center, and provide a max-height.
			height: $header-height;
			align-items: center;

			&.is-collapsed {
				width: initial;
			}

			&:empty {
				width: initial;
			}

			.is-fullscreen-mode & {
				// leave room for block inserter, undo and redo, list view
				// and some margin left
				margin-left: $grid-unit-80 * 4 - 2 * $grid-unit;

				top: 0;

				&.is-collapsed {
					width: initial;
				}

				&:empty {
					width: initial;
				}
			}

			& > .block-editor-block-toolbar {
				flex-grow: initial;
				width: initial;

				// Add a border as separator in the block toolbar.
				&::before {
					content: "";
					width: $border-width;
					height: 3 * $grid-unit;
					margin-top: $grid-unit + $grid-unit-05;
					margin-right: 0;
					background-color: $gray-300;
					position: relative;
					left: math.div(-$grid-unit-05, 2);
					top: -1px;
				}
			}

			& > .block-editor-block-toolbar__group-collapse-fixed-toolbar {
				border: none;

				.show-icon-labels & {
					.components-button.has-icon {
						// Hide the button icons when labels are set to display...
						svg {
							display: none;
						}
						// ... and display labels.
						&::after {
							content: attr(aria-label);
							font-size: $helptext-font-size;
						}
					}
				}

				// Add a border as separator in the block toolbar.
				&::before {
					content: "";
					width: $border-width;
					height: 3 * $grid-unit;
					margin-top: $grid-unit + $grid-unit-05;
					margin-right: $grid-unit-10;
					background-color: $gray-300;
					position: relative;
					left: 0;
					top: -1px;
				}
			}

			& > .block-editor-block-toolbar__group-expand-fixed-toolbar {
				border: none;

				.show-icon-labels & {
					width: $grid-unit-80 * 4;
					.components-button.has-icon {
						// Hide the button icons when labels are set to display...
						svg {
							display: none;
						}
						// ... and display labels.
						&::after {
							content: attr(aria-label);
							font-size: $helptext-font-size;
						}
					}
				}

				// Add a border as separator in the block toolbar.
				&::before {
					content: "";
					width: $border-width;
					margin-top: $grid-unit + $grid-unit-05;
					margin-bottom: $grid-unit + $grid-unit-05;
					background-color: $gray-300;
					position: relative;
					left: -8px;
					height: 3 * $grid-unit;
					top: -1px;
				}
			}

			.show-icon-labels & {

				margin-left: $grid-unit-80 + 2 * $grid-unit; // inserter and margin

				.is-fullscreen-mode & {
					margin-left: $grid-unit * 18; // site hub, inserter and margin
				}

				.block-editor-block-parent-selector .block-editor-block-parent-selector__button::after {
					left: 0;
				}

				.block-editor-block-toolbar__block-controls .block-editor-block-mover {
					border-left: none;
					&::before {
						content: "";
						width: $border-width;
						margin-top: $grid-unit + $grid-unit-05;
						margin-bottom: $grid-unit + $grid-unit-05;
						background-color: $gray-300;
						position: relative;
					}
				}
			}

			.blocks-widgets-container & {
				margin-left: $grid-unit-80 * 2.4;

				&.is-collapsed {
					margin-left: $grid-unit-80 * 4.2;
				}
			}
		}

		&.is-fixed .block-editor-block-parent-selector {

			.block-editor-block-parent-selector__button {
				position: relative;
				top: -1px;
				border: 0;
				padding-right: 6px;
				padding-left: 6px;

				&::after {
					content: "\00B7";
					font-size: 16px;
					line-height: $grid-unit-40 + $grid-unit-10;
					position: absolute;
					left: $grid-unit-40 + $grid-unit-15 + 2px;
					bottom: $grid-unit-05;
				}
			}
		}

		&:not(.is-fixed) .block-editor-block-parent-selector {
			position: absolute;
			top: -$border-width;
			left: calc(-#{$grid-unit-60} - #{$grid-unit-10} - #{$border-width});

			.show-icon-labels & {
				position: relative;
				left: auto;
				top: auto;
				margin-top: -$border-width;
				margin-left: -$border-width;
				margin-bottom: -$border-width;
			}
		}
	}

	// on tablet viewports the toolbar is fixed
	// on top of interface header and covers the whole header
	// except for the inserter on the left
	@include break-medium() {
		&.is-fixed {
			width: calc(100% - #{$toolbar-margin});

			.show-icon-labels & {
				width: calc(100% + 40px - #{$toolbar-margin}); //there are no undo, redo and list view buttons
			}

		}
	}

	// on desktop viewports the toolbar is fixed
	// on top of interface header and leaves room
	// for the block inserter the publish button
	@include break-large() {
		&.is-fixed {
			width: auto;
			.show-icon-labels & {
				width: auto; //there are no undo, redo and list view buttons
			}
		}
		.is-fullscreen-mode &.is-fixed {
			// in full screen mode we need to account for
			// the combined with of the tools at the right of the header and the margin left
			// of the toolbar which includes four buttons
			width: calc(100% - 280px - #{4 * $grid-unit-80});
		}
	}
}

/**
 * Block Label for Navigation/Selection Mode
 */

.block-editor-block-list__block-selection-button {
	display: inline-flex;
	padding: 0 $grid-unit-15;
	z-index: z-index(".block-editor-block-list__block-selection-button");

	// Dark block UI appearance.
	border-radius: $radius-block-ui;
	background-color: $gray-900;

	font-size: $default-font-size;
	height: $block-toolbar-height;

	.block-editor-block-list__block-selection-button__content {
		margin: auto;
		display: inline-flex;
		align-items: center;

		> .components-flex__item {
			margin-right: $grid-unit-15 * 0.5;
		}
	}
	.components-button.has-icon.block-selection-button_drag-handle {
		cursor: grab;
		padding: 0;
		height: $grid-unit-30;
		min-width: $grid-unit-30;
		margin-left: -2px;

		// Drag handle is smaller than the others.
		svg {
			min-width: 18px;
			min-height: 18px;
		}
	}

	.block-editor-block-icon {
		font-size: $default-font-size;
		color: $white;
		height: $block-toolbar-height;
	}

	// The button here has a special style to appear as a toolbar.
	.components-button {
		min-width: $button-size;
		color: $white;
		height: $block-toolbar-height;

		// When button is focused, it receives a box-shadow instead of the border.
		&:focus {
			box-shadow: none;
			border: none;
		}

		&:active {
			color: $white;
		}

		// Make sure the button has no hover style when it's disabled.
		&[aria-disabled="true"]:hover {
			color: $white;
		}

		display: flex;
	}
	.block-selection-button_select-button.components-button {
		padding: 0;
	}

	.block-editor-block-mover {
		background: unset;
		border: none;
	}
}

// Hide the popover block editor list while dragging.
// Using a hacky animation to delay hiding the element.
// It's needed because if we hide the element immediately upon dragging,
// the dragging will end immediately since there are no elements to be dragged anymore.
// Fortunately, we only have to keep it visible for a frame immediately after dragging,
// after that, we can safely hide it altogether.
@keyframes hide-during-dragging {
	to {
		position: fixed;
		transform: translate(9999px, 9999px);
	}
}

.components-popover.block-editor-block-list__block-popover {
	// Position the block toolbar.
	.block-editor-block-list__block-selection-button,
	.block-editor-block-contextual-toolbar {
		pointer-events: all;
		margin-top: $grid-unit-15;
		margin-bottom: $grid-unit-15;
	}

	// Hide the block toolbar if the insertion point is shown.
	&.is-insertion-point-visible {
		visibility: hidden;
	}

	.is-dragging-components-draggable & {
		opacity: 0;
		// Use a minimal duration to delay hiding the element, see hide-during-dragging animation for more details.
		// It's essential to hide the toolbar/popover so that `dragEnter` events can pass through them to the underlying elements.
		animation: hide-during-dragging 1ms linear forwards;
	}
}

.is-dragging-components-draggable .components-tooltip {
	display: none;
}
