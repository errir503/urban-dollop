// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Block Mover Picker moving blocks disables the Move Down button for the last block 1`] = `
"<!-- wp:paragraph -->
<p>Hello!</p>
<!-- /wp:paragraph -->

<!-- wp:spacer -->
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:heading -->
<h2 class="wp-block-heading"></h2>
<!-- /wp:heading -->"
`;

exports[`Block Mover Picker moving blocks disables the Move Up button for the first block 1`] = `
"<!-- wp:paragraph -->
<p>Hello!</p>
<!-- /wp:paragraph -->

<!-- wp:spacer -->
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:heading -->
<h2 class="wp-block-heading"></h2>
<!-- /wp:heading -->"
`;

exports[`Block Mover Picker moving blocks moves blocks up and down 1`] = `
"<!-- wp:heading -->
<h2 class="wp-block-heading"></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hello!</p>
<!-- /wp:paragraph -->

<!-- wp:spacer -->
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->"
`;

exports[`Block Mover Picker should render without crashing and match snapshot 1`] = `
<View
  style={
    [
      {
        "height": 44,
      },
      {
        "borderLeftWidth": 0.5,
      },
      undefined,
    ]
  }
>
  <View>
    <View
      accessibilityHint="Double tap to move the block to the left"
      accessibilityLabel="Move block left from position 2 to position 1"
      accessibilityRole="button"
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": false,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
          "opacity": 1,
          "padding": 3,
        }
      }
    >
      <View
        collapsable={false}
        handlerTag={1}
        handlerType="LongPressGestureHandler"
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        style={
          {
            "alignItems": "center",
            "aspectRatio": 1,
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "center",
            "opacity": 1,
          }
        }
      >
        <View
          style={
            {
              "flexDirection": "row",
            }
          }
        >
          <Svg
            height={24}
            style={{}}
            viewBox="0 0 24 24"
            width={24}
            xmlns="http://www.w3.org/2000/svg"
          >
            Path
          </Svg>
        </View>
      </View>
    </View>
  </View>
  <View>
    <View
      accessibilityHint="Double tap to move the block to the right"
      accessibilityLabel="Move block right"
      accessibilityRole="button"
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": true,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
          "opacity": 1,
          "padding": 3,
        }
      }
    >
      <View
        collapsable={false}
        handlerTag={2}
        handlerType="LongPressGestureHandler"
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        style={
          {
            "alignItems": "center",
            "aspectRatio": 1,
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "center",
            "opacity": 0.3,
          }
        }
      >
        <View
          style={
            {
              "flexDirection": "row",
            }
          }
        >
          <Svg
            height={24}
            style={{}}
            viewBox="0 0 24 24"
            width={24}
            xmlns="http://www.w3.org/2000/svg"
          >
            Path
          </Svg>
        </View>
      </View>
    </View>
  </View>
</View>
`;
