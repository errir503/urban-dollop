// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ColorPalette Dropdown .renderContent should render dropdown content 1`] = `
<ColorPicker
  color="#f00"
  onChange={[Function]}
/>
`;

exports[`ColorPalette Dropdown .renderToggle should render dropdown content 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-1 {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  width: 100%;
}

.emotion-2>*+*:not( marquee ) {
  margin-left: calc(4px * 2);
}

.emotion-3>* {
  min-width: 0;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  width: 100%;
}

.emotion-4>*+*:not( marquee ) {
  margin-left: calc(4px * 2);
}

.emotion-4>* {
  min-width: 0;
}

.emotion-6 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
}

.emotion-8 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-9 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-11 {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.emotion-15 {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-19 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
}

<Flex
  align="flex-start"
  aria-expanded={true}
  aria-haspopup="true"
  aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
  as="button"
  className="components-color-palette__custom-color"
  justify="space-between"
  onClick={[MockFunction]}
  style={
    Object {
      "background": "#f00",
      "color": "#000",
    }
  }
>
  <View
    aria-expanded={true}
    aria-haspopup="true"
    aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
    as="button"
    className="emotion-0 emotion-1 emotion-2 emotion-3 components-flex components-color-palette__custom-color"
    data-wp-c16t={true}
    data-wp-component="Flex"
    onClick={[MockFunction]}
    style={
      Object {
        "background": "#f00",
        "color": "#000",
      }
    }
  >
    <Noop />
    <button
      aria-expanded={true}
      aria-haspopup="true"
      aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
      className="components-flex components-color-palette__custom-color emotion-4 emotion-5"
      data-wp-c16t={true}
      data-wp-component="Flex"
      onClick={[MockFunction]}
      style={
        Object {
          "background": "#f00",
          "color": "#000",
        }
      }
    >
      <FlexItem
        as={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "__contextSystemKey__": Array [
              "Truncate",
            ],
            "render": [Function],
            "selector": ".components-truncate",
          }
        }
        className="components-color-palette__custom-color-name"
        isBlock={true}
      >
        <View
          as={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "__contextSystemKey__": Array [
                "Truncate",
              ],
              "render": [Function],
              "selector": ".components-truncate",
            }
          }
          className="emotion-6 emotion-7 emotion-8 components-flex-item components-color-palette__custom-color-name"
          data-wp-c16t={true}
          data-wp-component="FlexItem"
        >
          <Noop />
          <Truncate
            className="components-flex-item components-color-palette__custom-color-name emotion-9 emotion-5"
            data-wp-c16t={true}
            data-wp-component="FlexItem"
          >
            <View
              as="span"
              className="emotion-11 components-truncate components-flex-item components-color-palette__custom-color-name emotion-9 emotion-5"
              data-wp-c16t={true}
              data-wp-component="FlexItem"
            >
              <Noop />
              <span
                className="components-truncate components-flex-item components-color-palette__custom-color-name emotion-5 emotion-15 emotion-5"
                data-wp-c16t={true}
                data-wp-component="FlexItem"
              >
                red
              </span>
            </View>
          </Truncate>
        </View>
      </FlexItem>
      <FlexItem
        as="span"
        className="components-color-palette__custom-color-value"
      >
        <View
          as="span"
          className="emotion-6 emotion-7 components-flex-item components-color-palette__custom-color-value"
          data-wp-c16t={true}
          data-wp-component="FlexItem"
        >
          <Noop />
          <span
            className="components-flex-item components-color-palette__custom-color-value emotion-19 emotion-5"
            data-wp-c16t={true}
            data-wp-component="FlexItem"
          >
            f00
          </span>
        </View>
      </FlexItem>
    </button>
  </View>
</Flex>
`;

exports[`ColorPalette Dropdown should render it correctly 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-1 {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  width: 100%;
}

.emotion-2>*+*:not( marquee ) {
  margin-left: calc(4px * 2);
}

.emotion-3>* {
  min-width: 0;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  width: 100%;
}

.emotion-4>*+*:not( marquee ) {
  margin-left: calc(4px * 2);
}

.emotion-4>* {
  min-width: 0;
}

.emotion-6 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
}

.emotion-8 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-9 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-11 {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.emotion-15 {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-19 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
}

<Dropdown
  contentClassName="components-color-palette__custom-color-dropdown-content"
  renderContent={[Function]}
  renderToggle={[Function]}
>
  <div
    className="components-dropdown"
    tabIndex="-1"
  >
    <Flex
      align="flex-start"
      aria-expanded={false}
      aria-haspopup="true"
      aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
      as="button"
      className="components-color-palette__custom-color"
      justify="space-between"
      onClick={[Function]}
      style={
        Object {
          "background": "#f00",
          "color": "#000",
        }
      }
    >
      <View
        aria-expanded={false}
        aria-haspopup="true"
        aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
        as="button"
        className="emotion-0 emotion-1 emotion-2 emotion-3 components-flex components-color-palette__custom-color"
        data-wp-c16t={true}
        data-wp-component="Flex"
        onClick={[Function]}
        style={
          Object {
            "background": "#f00",
            "color": "#000",
          }
        }
      >
        <Noop />
        <button
          aria-expanded={false}
          aria-haspopup="true"
          aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
          className="components-flex components-color-palette__custom-color emotion-4 emotion-5"
          data-wp-c16t={true}
          data-wp-component="Flex"
          onClick={[Function]}
          style={
            Object {
              "background": "#f00",
              "color": "#000",
            }
          }
        >
          <FlexItem
            as={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "__contextSystemKey__": Array [
                  "Truncate",
                ],
                "render": [Function],
                "selector": ".components-truncate",
              }
            }
            className="components-color-palette__custom-color-name"
            isBlock={true}
          >
            <View
              as={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "__contextSystemKey__": Array [
                    "Truncate",
                  ],
                  "render": [Function],
                  "selector": ".components-truncate",
                }
              }
              className="emotion-6 emotion-7 emotion-8 components-flex-item components-color-palette__custom-color-name"
              data-wp-c16t={true}
              data-wp-component="FlexItem"
            >
              <Noop />
              <Truncate
                className="components-flex-item components-color-palette__custom-color-name emotion-9 emotion-5"
                data-wp-c16t={true}
                data-wp-component="FlexItem"
              >
                <View
                  as="span"
                  className="emotion-11 components-truncate components-flex-item components-color-palette__custom-color-name emotion-9 emotion-5"
                  data-wp-c16t={true}
                  data-wp-component="FlexItem"
                >
                  <Noop />
                  <span
                    className="components-truncate components-flex-item components-color-palette__custom-color-name emotion-5 emotion-15 emotion-5"
                    data-wp-c16t={true}
                    data-wp-component="FlexItem"
                  >
                    red
                  </span>
                </View>
              </Truncate>
            </View>
          </FlexItem>
          <FlexItem
            as="span"
            className="components-color-palette__custom-color-value"
          >
            <View
              as="span"
              className="emotion-6 emotion-7 components-flex-item components-color-palette__custom-color-value"
              data-wp-c16t={true}
              data-wp-component="FlexItem"
            >
              <Noop />
              <span
                className="components-flex-item components-color-palette__custom-color-value emotion-19 emotion-5"
                data-wp-c16t={true}
                data-wp-component="FlexItem"
              >
                f00
              </span>
            </View>
          </FlexItem>
        </button>
      </View>
    </Flex>
  </div>
</Dropdown>
`;

exports[`ColorPalette should allow disabling custom color picker 1`] = `
<VStack
  spacing={3}
>
  <SinglePalette
    actions={
      <ButtonAction
        onClick={[Function]}
      >
        Clear
      </ButtonAction>
    }
    clearColor={[Function]}
    clearable={true}
    colors={
      Array [
        Object {
          "color": "#f00",
          "name": "red",
        },
        Object {
          "color": "#fff",
          "name": "white",
        },
        Object {
          "color": "#00f",
          "name": "blue",
        },
      ]
    }
    onChange={[MockFunction]}
    value="#f00"
  />
</VStack>
`;

exports[`ColorPalette should render a dynamic toolbar of colors 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-1 {
  -webkit-align-items: normal;
  -webkit-box-align: normal;
  -ms-flex-align: normal;
  align-items: normal;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
}

.emotion-2>*+*:not( marquee ) {
  margin-top: calc(4px * 3);
}

.emotion-3>* {
  min-height: 0;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: normal;
  -webkit-box-align: normal;
  -ms-flex-align: normal;
  align-items: normal;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
}

.emotion-4>*+*:not( marquee ) {
  margin-top: calc(4px * 3);
}

.emotion-4>* {
  min-height: 0;
}

.emotion-7 {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  width: 100%;
}

.emotion-8>*+*:not( marquee ) {
  margin-left: calc(4px * 2);
}

.emotion-9>* {
  min-width: 0;
}

.emotion-10 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  width: 100%;
}

.emotion-10>*+*:not( marquee ) {
  margin-left: calc(4px * 2);
}

.emotion-10>* {
  min-width: 0;
}

.emotion-12 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
}

.emotion-14 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-15 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-17 {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.emotion-21 {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.emotion-25 {
  display: block;
  max-height: 100%;
  max-width: 100%;
  min-height: 0;
  min-width: 0;
}

<ColorPalette
  colors={
    Array [
      Object {
        "color": "#f00",
        "name": "red",
      },
      Object {
        "color": "#fff",
        "name": "white",
      },
      Object {
        "color": "#00f",
        "name": "blue",
      },
    ]
  }
  onChange={[MockFunction]}
  value="#f00"
>
  <VStack
    spacing={3}
  >
    <View
      className="emotion-0 emotion-1 emotion-2 emotion-3 components-flex components-h-stack components-v-stack"
      data-wp-c16t={true}
      data-wp-component="VStack"
      isColumn={true}
    >
      <Noop />
      <div
        className="components-flex components-h-stack components-v-stack emotion-4 emotion-5"
        data-wp-c16t={true}
        data-wp-component="VStack"
      >
        <CustomColorPickerDropdown
          isRenderedInSidebar={false}
          key=".0"
          renderContent={[Function]}
          renderToggle={[Function]}
        >
          <Dropdown
            contentClassName="components-color-palette__custom-color-dropdown-content"
            renderContent={[Function]}
            renderToggle={[Function]}
          >
            <div
              className="components-dropdown"
              tabIndex="-1"
            >
              <Flex
                align="flex-start"
                aria-expanded={false}
                aria-haspopup="true"
                aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
                as="button"
                className="components-color-palette__custom-color"
                justify="space-between"
                onClick={[Function]}
                style={
                  Object {
                    "background": "#f00",
                    "color": "#000",
                  }
                }
              >
                <View
                  aria-expanded={false}
                  aria-haspopup="true"
                  aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
                  as="button"
                  className="emotion-0 emotion-7 emotion-8 emotion-9 components-flex components-color-palette__custom-color"
                  data-wp-c16t={true}
                  data-wp-component="Flex"
                  onClick={[Function]}
                  style={
                    Object {
                      "background": "#f00",
                      "color": "#000",
                    }
                  }
                >
                  <Noop />
                  <button
                    aria-expanded={false}
                    aria-haspopup="true"
                    aria-label="Custom color picker. The currently selected color is called \\"red\\" and has a value of \\"f00\\"."
                    className="components-flex components-color-palette__custom-color emotion-10 emotion-5"
                    data-wp-c16t={true}
                    data-wp-component="Flex"
                    onClick={[Function]}
                    style={
                      Object {
                        "background": "#f00",
                        "color": "#000",
                      }
                    }
                  >
                    <FlexItem
                      as={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "__contextSystemKey__": Array [
                            "Truncate",
                          ],
                          "render": [Function],
                          "selector": ".components-truncate",
                        }
                      }
                      className="components-color-palette__custom-color-name"
                      isBlock={true}
                    >
                      <View
                        as={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "__contextSystemKey__": Array [
                              "Truncate",
                            ],
                            "render": [Function],
                            "selector": ".components-truncate",
                          }
                        }
                        className="emotion-12 emotion-13 emotion-14 components-flex-item components-color-palette__custom-color-name"
                        data-wp-c16t={true}
                        data-wp-component="FlexItem"
                      >
                        <Noop />
                        <Truncate
                          className="components-flex-item components-color-palette__custom-color-name emotion-15 emotion-5"
                          data-wp-c16t={true}
                          data-wp-component="FlexItem"
                        >
                          <View
                            as="span"
                            className="emotion-17 components-truncate components-flex-item components-color-palette__custom-color-name emotion-15 emotion-5"
                            data-wp-c16t={true}
                            data-wp-component="FlexItem"
                          >
                            <Noop />
                            <span
                              className="components-truncate components-flex-item components-color-palette__custom-color-name emotion-5 emotion-21 emotion-5"
                              data-wp-c16t={true}
                              data-wp-component="FlexItem"
                            >
                              red
                            </span>
                          </View>
                        </Truncate>
                      </View>
                    </FlexItem>
                    <FlexItem
                      as="span"
                      className="components-color-palette__custom-color-value"
                    >
                      <View
                        as="span"
                        className="emotion-12 emotion-13 components-flex-item components-color-palette__custom-color-value"
                        data-wp-c16t={true}
                        data-wp-component="FlexItem"
                      >
                        <Noop />
                        <span
                          className="components-flex-item components-color-palette__custom-color-value emotion-25 emotion-5"
                          data-wp-c16t={true}
                          data-wp-component="FlexItem"
                        >
                          f00
                        </span>
                      </View>
                    </FlexItem>
                  </button>
                </View>
              </Flex>
            </div>
          </Dropdown>
        </CustomColorPickerDropdown>
        <SinglePalette
          actions={
            <ButtonAction
              onClick={[Function]}
            >
              Clear
            </ButtonAction>
          }
          clearColor={[Function]}
          clearable={true}
          colors={
            Array [
              Object {
                "color": "#f00",
                "name": "red",
              },
              Object {
                "color": "#fff",
                "name": "white",
              },
              Object {
                "color": "#00f",
                "name": "blue",
              },
            ]
          }
          key=".1"
          onChange={[MockFunction]}
          value="#f00"
        >
          <CircularOptionPicker
            actions={
              <ButtonAction
                onClick={[Function]}
              >
                Clear
              </ButtonAction>
            }
            options={
              Array [
                <Option
                  aria-label="Color: red"
                  isSelected={true}
                  onClick={[Function]}
                  selectedIconProps={
                    Object {
                      "fill": "#000",
                    }
                  }
                  style={
                    Object {
                      "backgroundColor": "#f00",
                      "color": "#f00",
                    }
                  }
                  tooltipText="red"
                />,
                <Option
                  aria-label="Color: white"
                  isSelected={false}
                  onClick={[Function]}
                  selectedIconProps={Object {}}
                  style={
                    Object {
                      "backgroundColor": "#fff",
                      "color": "#fff",
                    }
                  }
                  tooltipText="white"
                />,
                <Option
                  aria-label="Color: blue"
                  isSelected={false}
                  onClick={[Function]}
                  selectedIconProps={Object {}}
                  style={
                    Object {
                      "backgroundColor": "#00f",
                      "color": "#00f",
                    }
                  }
                  tooltipText="blue"
                />,
              ]
            }
          >
            <div
              className="components-circular-option-picker"
            >
              <div
                className="components-circular-option-picker__swatches"
              >
                <Option
                  aria-label="Color: red"
                  isSelected={true}
                  key="#f00"
                  onClick={[Function]}
                  selectedIconProps={
                    Object {
                      "fill": "#000",
                    }
                  }
                  style={
                    Object {
                      "backgroundColor": "#f00",
                      "color": "#f00",
                    }
                  }
                  tooltipText="red"
                >
                  <div
                    className="components-circular-option-picker__option-wrapper"
                  >
                    <Tooltip
                      text="red"
                    >
                      <ForwardRef(Button)
                        aria-label="Color: red"
                        className="components-circular-option-picker__option"
                        isPressed={true}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        style={
                          Object {
                            "backgroundColor": "#f00",
                            "color": "#f00",
                          }
                        }
                      >
                        <button
                          aria-describedby={null}
                          aria-label="Color: red"
                          aria-pressed={true}
                          className="components-button components-circular-option-picker__option is-pressed"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          style={
                            Object {
                              "backgroundColor": "#f00",
                              "color": "#f00",
                            }
                          }
                          type="button"
                        />
                      </ForwardRef(Button)>
                    </Tooltip>
                    <Icon
                      fill="#000"
                      icon={
                        <SVG
                          viewBox="0 0 24 24"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <Path
                            d="M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z"
                          />
                        </SVG>
                      }
                    >
                      <SVG
                        fill="#000"
                        height={24}
                        viewBox="0 0 24 24"
                        width={24}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <svg
                          aria-hidden={true}
                          fill="#000"
                          focusable={false}
                          height={24}
                          viewBox="0 0 24 24"
                          width={24}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <Path
                            d="M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z"
                          >
                            <path
                              d="M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z"
                            />
                          </Path>
                        </svg>
                      </SVG>
                    </Icon>
                  </div>
                </Option>
                <Option
                  aria-label="Color: white"
                  isSelected={false}
                  key="#fff"
                  onClick={[Function]}
                  selectedIconProps={Object {}}
                  style={
                    Object {
                      "backgroundColor": "#fff",
                      "color": "#fff",
                    }
                  }
                  tooltipText="white"
                >
                  <div
                    className="components-circular-option-picker__option-wrapper"
                  >
                    <Tooltip
                      text="white"
                    >
                      <ForwardRef(Button)
                        aria-label="Color: white"
                        className="components-circular-option-picker__option"
                        isPressed={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        style={
                          Object {
                            "backgroundColor": "#fff",
                            "color": "#fff",
                          }
                        }
                      >
                        <button
                          aria-describedby={null}
                          aria-label="Color: white"
                          aria-pressed={false}
                          className="components-button components-circular-option-picker__option"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          style={
                            Object {
                              "backgroundColor": "#fff",
                              "color": "#fff",
                            }
                          }
                          type="button"
                        />
                      </ForwardRef(Button)>
                    </Tooltip>
                  </div>
                </Option>
                <Option
                  aria-label="Color: blue"
                  isSelected={false}
                  key="#00f"
                  onClick={[Function]}
                  selectedIconProps={Object {}}
                  style={
                    Object {
                      "backgroundColor": "#00f",
                      "color": "#00f",
                    }
                  }
                  tooltipText="blue"
                >
                  <div
                    className="components-circular-option-picker__option-wrapper"
                  >
                    <Tooltip
                      text="blue"
                    >
                      <ForwardRef(Button)
                        aria-label="Color: blue"
                        className="components-circular-option-picker__option"
                        isPressed={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        style={
                          Object {
                            "backgroundColor": "#00f",
                            "color": "#00f",
                          }
                        }
                      >
                        <button
                          aria-describedby={null}
                          aria-label="Color: blue"
                          aria-pressed={false}
                          className="components-button components-circular-option-picker__option"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          style={
                            Object {
                              "backgroundColor": "#00f",
                              "color": "#00f",
                            }
                          }
                          type="button"
                        />
                      </ForwardRef(Button)>
                    </Tooltip>
                  </div>
                </Option>
              </div>
              <div
                className="components-circular-option-picker__custom-clear-wrapper"
              >
                <ButtonAction
                  onClick={[Function]}
                >
                  <ForwardRef(Button)
                    className="components-circular-option-picker__clear"
                    onClick={[Function]}
                    variant="tertiary"
                  >
                    <button
                      aria-describedby={null}
                      className="components-button components-circular-option-picker__clear is-tertiary"
                      onClick={[Function]}
                      type="button"
                    >
                      Clear
                    </button>
                  </ForwardRef(Button)>
                </ButtonAction>
              </div>
            </div>
          </CircularOptionPicker>
        </SinglePalette>
      </div>
    </View>
  </VStack>
</ColorPalette>
`;
