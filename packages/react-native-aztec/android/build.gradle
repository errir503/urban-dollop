buildscript {
    ext {
        gradlePluginVersion = '4.0.2'
        kotlinVersion = '1.3.61'
        supportLibVersion = '29.0.2'
        tagSoupVersion = '1.2.1'
        glideVersion = '3.7.0'
        picassoVersion = '2.5.2'
        robolectricVersion = '3.5.1'
        jUnitVersion = '4.12'
        jSoupVersion = '1.10.3'
        wordpressUtilsVersion = '1.22'
        espressoVersion = '3.0.1'
        aztecVersion = 'v1.3.45'
        willPublishReactNativeAztecBinary = properties["publishReactNativeAztecVersion"]?.trim() as boolean
    }

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradlePluginVersion"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'

// import the `readReactNativeVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/742448b9588b3a0aa580a5e80ae95bdf/raw/8eb62d40ee7a5104d2fcaeff21ce6f29bd93b054/readReactNativeVersion.gradle'

group = 'org.wordpress-mobile.gutenberg-mobile'

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                java.srcDirs += "src/${dir}/kotlin"
                res.srcDirs "src/${dir}/res"
            }
        }

        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }

    lintOptions {
        disable 'GradleCompatible'
        abortOnError false
    }
}

repositories {
    jcenter()
    google()

    maven { url "https://jitpack.io" }
    maven { url "https://a8c-libs.s3.amazonaws.com/android/hermes-mirror" }

    if (willPublishReactNativeAztecBinary) {
        maven { url "https://a8c-libs.s3.amazonaws.com/android/react-native-mirror" }
    } else {
        maven { url("$rootDir/../../../node_modules/react-native/android") }
    }
}

dependencies {
    api "com.github.wordpress-mobile.WordPress-Aztec-Android:aztec:$aztecVersion"
    api "com.github.wordpress-mobile.WordPress-Aztec-Android:wordpress-shortcodes:$aztecVersion"
    api "com.github.wordpress-mobile.WordPress-Aztec-Android:wordpress-comments:$aztecVersion"
    api "com.github.wordpress-mobile.WordPress-Aztec-Android:glide-loader:$aztecVersion"
    implementation "org.wordpress:utils:$wordpressUtilsVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    testImplementation 'junit:junit:4.13'

    if (willPublishReactNativeAztecBinary) {
        def rnVersion = readReactNativeVersion('../../../package.json', 'devDependencies')
        println "react-native version for react-native-aztec: $rnVersion"
        implementation "com.facebook.react:react-native:$rnVersion"
    } else {
        implementation "com.facebook.react:react-native:+"
    }
}

if (willPublishReactNativeAztecBinary) {
    project.afterEvaluate {
        publishing {
            publications {
                ReactNativeAztecPublication(MavenPublication) {
                    artifact bundleReleaseAar

                    groupId 'org.wordpress-mobile.gutenberg-mobile'
                    artifactId 'react-native-aztec'
                    version publishReactNativeAztecVersion

                    addDependenciesToPom(pom)
                }
            }
            repositories {
                maven {
                    url "s3://a8c-libs.s3.amazonaws.com/android"
                    credentials(AwsCredentials) {
                        accessKey project.hasProperty('awsAccessKey') ? project.properties['awsAccessKey'] : System.getenv('AWS_ACCESS_KEY')
                        secretKey project.hasProperty('awsSecretKey') ? project.properties['awsSecretKey'] : System.getenv('AWS_SECRET_KEY')
                    }
                }
            }
        }
    }
}

// Publication doesn't know about dependencies, so we need to manually add them
def addDependenciesToPom(pom) {
    pom.withXml {
        def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

        // Iterate over the implementation dependencies, adding a <dependency> node for each
        configurations.implementation.allDependencies
                .findAll { it instanceof ExternalDependency && it.name != 'unspecified' }
                .each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
    }
}

tasks.register('checkIfVersionIsAlreadyPublished') {
    def pomUrl = "https://a8c-libs.s3.amazonaws.com/android/org/wordpress-mobile/gutenberg-mobile/react-native-aztec/${publishReactNativeAztecVersion}/react-native-aztec-${publishReactNativeAztecVersion}.pom"
    def responseCode = new URL(pomUrl).openConnection().with { connection ->
        requestMethod = 'HEAD'
        connect()
        responseCode
    }

    if (responseCode == 200) {
        throw new GradleException("'$publishReactNativeAztecVersion' is already published, please use a different version name. If this happened in CI for a PR, a new commit is necessary. If this happened for a tag, the existing version needs to be manually removed from S3.")
    } else if (responseCode == 403) {
        // S3 returns 403 status code if a file doesn't exist, which is what we want. Proceed to publish..
    } else {
        throw new GradleException("An unexpected status code ($responseCode) was received while checking if the version ($publishReactNativeAztecVersion) is already published to S3. If this issue persists, please contact Platform 9 team for help.")
    }
}

publish.dependsOn(tasks.named('checkIfVersionIsAlreadyPublished'))
publish.doLast { println "Successfully published 'react-native-aztec' version '$publishReactNativeAztecVersion'" }

